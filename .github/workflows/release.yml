name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pyinstaller

      - name: Increment version
        id: bump_version
        shell: bash
        run: |
          python - <<'PY'
          from pathlib import Path
          import os
          import re

          version_file = Path("yt_downloader") / "__init__.py"
          text = version_file.read_text(encoding="utf-8")

          match = re.search(r'__version__\s*=\s*"(?P<version>\d+\.\d+\.\d+)"', text)
          if not match:
              raise SystemExit("Unable to find __version__ in yt_downloader/__init__.py")

          major, minor, patch = map(int, match.group("version").split("."))
          patch += 1
          new_version = f"{major}.{minor}.{patch}"

          new_text = re.sub(
              r'(__version__\s*=\s*")\d+\.\d+\.\d+(\")',
              lambda match: f"{match.group(1)}{new_version}{match.group(2)}",
              text,
              count=1,
          )

          version_file.write_text(new_text, encoding="utf-8")

          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as fh:
              fh.write(f"version={new_version}\n")
          PY

      - name: Run tests
        run: pytest

      - name: Build application
        run: pyinstaller --onefile --noconsole ui.py -n yt-downloader

      - name: Package Windows artifact
        env:
          VERSION: ${{ steps.bump_version.outputs.version }}
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path release -Force | Out-Null
          Copy-Item dist\yt-downloader.exe release\yt-downloader.exe -Force
          Compress-Archive -Path release\yt-downloader.exe -DestinationPath "release\yt-downloader-$env:VERSION-windows.zip" -Force

      - name: Commit version bump
        env:
          VERSION: ${{ steps.bump_version.outputs.version }}
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          if git diff --quiet; then
            echo "No changes to commit."
          else
            git commit -am "chore: bump version to v${VERSION} [skip ci]"
            git push
          fi

      - name: Create or update tag
        env:
          VERSION: ${{ steps.bump_version.outputs.version }}
        shell: bash
        run: |
          git tag -f "v${VERSION}"
          git push origin "v${VERSION}" --force

      - name: Delete existing GitHub release if present
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.bump_version.outputs.version }}
        shell: bash
        run: |
          python - <<'PY'
          import json
          import os
          import urllib.error
          import urllib.request

          repository = os.environ["GITHUB_REPOSITORY"]
          token = os.environ["GITHUB_TOKEN"]
          version = os.environ["VERSION"]
          tag_name = f"v{version}"

          request = urllib.request.Request(
              f"https://api.github.com/repos/{repository}/releases/tags/{tag_name}",
              headers={
                  "Authorization": f"Bearer {token}",
                  "Accept": "application/vnd.github+json",
                  "X-GitHub-Api-Version": "2022-11-28",
              },
          )

          try:
              with urllib.request.urlopen(request) as response:
                  data = json.load(response)
          except urllib.error.HTTPError as exc:
              if exc.code == 404:
                  raise SystemExit(0)
              raise

          release_id = data.get("id")
          if not release_id:
              raise SystemExit(0)

          delete_request = urllib.request.Request(
              f"https://api.github.com/repos/{repository}/releases/{release_id}",
              method="DELETE",
              headers={
                  "Authorization": f"Bearer {token}",
                  "Accept": "application/vnd.github+json",
                  "X-GitHub-Api-Version": "2022-11-28",
              },
          )

          with urllib.request.urlopen(delete_request):
              pass
          PY

      - name: Create GitHub release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.bump_version.outputs.version }}
        uses: actions/create-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release v${{ env.VERSION }}
          draft: false
          prerelease: false

      - name: Upload Windows release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.bump_version.outputs.version }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/yt-downloader-${{ env.VERSION }}-windows.zip
          asset_name: yt-downloader-${{ env.VERSION }}-windows.zip
          asset_content_type: application/zip
