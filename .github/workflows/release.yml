name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk tk

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pyinstaller

      - name: Run tests
        run: pytest

      - name: Build application
        run: pyinstaller --onefile ui.py -n yt-downloader

      - name: Determine version
        id: version
        run: |
          python - <<'PY'
          import ast
          import os
          from pathlib import Path

          repo_root = Path.cwd()
          candidate_paths = [
              repo_root / "yt_downloader" / "version.py",
              repo_root / "yt_downloader" / "__init__.py",
          ]

          version = None
          for path in candidate_paths:
              if not path.exists():
                  continue
              tree = ast.parse(path.read_text())
              for node in tree.body:
                  if isinstance(node, ast.Assign):
                      for target in node.targets:
                          if getattr(target, "id", None) in {"__version__", "VERSION", "version"}:
                              value = getattr(node, "value", None)
                              if isinstance(value, ast.Constant) and isinstance(value.value, str):
                                  version = value.value.strip()
                                  break
                      if version:
                          break
              if version:
                  break

          if not version:
              raise SystemExit("Unable to determine project version.")

          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as fh:
              fh.write(f"version={version}\n")
          PY

      - name: Configure git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Create or update tag
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          git tag -f "v${VERSION}"
          git push origin "v${VERSION}" --force

      - name: Package artifact
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          mkdir -p release
          cp dist/yt-downloader release/yt-downloader
          tar -czf release/yt-downloader-${VERSION}-linux.tar.gz -C release yt-downloader

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/yt-downloader-${{ steps.version.outputs.version }}-linux.tar.gz
          asset_name: yt-downloader-${{ steps.version.outputs.version }}-linux.tar.gz
          asset_content_type: application/gzip
